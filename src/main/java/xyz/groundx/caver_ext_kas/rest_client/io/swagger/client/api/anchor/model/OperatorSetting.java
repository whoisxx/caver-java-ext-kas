/*
 * Anchor API
 * # Introduction 이 문서는 KAS\\(Klaytn API Service\\)의 Anchor API를 소개하는 문서입니다. Anchor API는 서비스 체인 데이터의 신뢰성을 보장하기 위해 데이터 신뢰성을 증명할 수 있는 메타데이터를 Klaytn 메인 체인에 전송하는 기능을 제공합니다.  자세한 사용 예시는 [튜토리얼](링크)를 확인하십시오.    # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1071010 | data don't exist 1071615 | its value is out of range; size 1072100 | same payload ID or payload was already anchored 1072101 | all configured accounts have insufficient funds |  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;
/**
 * 오퍼레이터 결제 정보
 */
@Schema(description = "오퍼레이터 결제 정보")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-06T07:59:17.215Z[GMT]")
public class OperatorSetting {
  @SerializedName("useGlobalFeePayer")
  private Boolean useGlobalFeePayer = null;

  @SerializedName("useOperator")
  private Boolean useOperator = null;

  public OperatorSetting useGlobalFeePayer(Boolean useGlobalFeePayer) {
    this.useGlobalFeePayer = useGlobalFeePayer;
    return this;
  }

   /**
   * 글로벌 대납 계정 사용 여부
   * @return useGlobalFeePayer
  **/
  @Schema(example = "true", required = true, description = "글로벌 대납 계정 사용 여부")
  public Boolean isUseGlobalFeePayer() {
    return useGlobalFeePayer;
  }

  public void setUseGlobalFeePayer(Boolean useGlobalFeePayer) {
    this.useGlobalFeePayer = useGlobalFeePayer;
  }

  public OperatorSetting useOperator(Boolean useOperator) {
    this.useOperator = useOperator;
    return this;
  }

   /**
   * 오퍼레이터 결제 사용 여부
   * @return useOperator
  **/
  @Schema(example = "true", required = true, description = "오퍼레이터 결제 사용 여부")
  public Boolean isUseOperator() {
    return useOperator;
  }

  public void setUseOperator(Boolean useOperator) {
    this.useOperator = useOperator;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperatorSetting operatorSetting = (OperatorSetting) o;
    return Objects.equals(this.useGlobalFeePayer, operatorSetting.useGlobalFeePayer) &&
        Objects.equals(this.useOperator, operatorSetting.useOperator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useGlobalFeePayer, useOperator);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperatorSetting {\n");
    
    sb.append("    useGlobalFeePayer: ").append(toIndentedString(useGlobalFeePayer)).append("\n");
    sb.append("    useOperator: ").append(toIndentedString(useOperator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

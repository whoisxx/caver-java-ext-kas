/*
 * Token History API
 * # Introduction  Token History API는 KLAY, FT (KIP-7, Labeled ERC-20), NFT (KIP-17, Labeled ERC-721) 토큰 정보, 이들 토큰을 주고받은 기록을 조회하는 기능을 제공합니다. 여러분은 특정 EOA가 KLAY를 주고받은 기록을 확인하거나 EOA가 가지고 있는 NFT 정보를 불러오는 등 Token History API를 다양하게 활용할 수 있습니다.   Token History API 사용에 관한 자세한 내용은 [튜토리얼](https://klaytn.com)을 확인하십시오.   이 문서 혹은 KAS에 관한 문의는 [개발자 포럼](https://forum.klaytn.com/)을 방문해 도움을 받으십시오  
 *
 * OpenAPI spec version: 0.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;
/**
 * NftTransfer
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-18T08:08:47.543Z[GMT]")
public class NftTransfer implements AnyOfTransferArrayItems {
  @SerializedName("contract")
  private NftContract contract = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("transaction")
  private Transaction transaction = null;

  @SerializedName("transferType")
  private String transferType = null;

  @SerializedName("tokenId")
  private String tokenId = null;

  public NftTransfer contract(NftContract contract) {
    this.contract = contract;
    return this;
  }

   /**
   * Get contract
   * @return contract
  **/
  @Schema(required = true, description = "")
  public NftContract getContract() {
    return contract;
  }

  public void setContract(NftContract contract) {
    this.contract = contract;
  }

  public NftTransfer from(String from) {
    this.from = from;
    return this;
  }

   /**
   * 보낸 사람 EOA (20-byte)
   * @return from
  **/
  @Schema(example = "0x5e47b195eeb11d72f5e1d27aebb6d341f1a9bedb", required = true, description = "보낸 사람 EOA (20-byte)")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public NftTransfer to(String to) {
    this.to = to;
    return this;
  }

   /**
   * 받은 사람 EOA (20-byte)
   * @return to
  **/
  @Schema(example = "0xb4bf60383c64d47f2e667f2fe8f7ed0c9380f770", required = true, description = "받은 사람 EOA (20-byte)")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public NftTransfer transaction(Transaction transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @Schema(required = true, description = "")
  public Transaction getTransaction() {
    return transaction;
  }

  public void setTransaction(Transaction transaction) {
    this.transaction = transaction;
  }

  public NftTransfer transferType(String transferType) {
    this.transferType = transferType;
    return this;
  }

   /**
   * 거래내역 유형
   * @return transferType
  **/
  @Schema(example = "nft", required = true, description = "거래내역 유형")
  public String getTransferType() {
    return transferType;
  }

  public void setTransferType(String transferType) {
    this.transferType = transferType;
  }

  public NftTransfer tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

   /**
   * 토큰 식별자 (16진수)
   * @return tokenId
  **/
  @Schema(example = "0x1", required = true, description = "토큰 식별자 (16진수)")
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NftTransfer nftTransfer = (NftTransfer) o;
    return Objects.equals(this.contract, nftTransfer.contract) &&
        Objects.equals(this.from, nftTransfer.from) &&
        Objects.equals(this.to, nftTransfer.to) &&
        Objects.equals(this.transaction, nftTransfer.transaction) &&
        Objects.equals(this.transferType, nftTransfer.transferType) &&
        Objects.equals(this.tokenId, nftTransfer.tokenId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contract, from, to, transaction, transferType, tokenId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NftTransfer {\n");
    
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

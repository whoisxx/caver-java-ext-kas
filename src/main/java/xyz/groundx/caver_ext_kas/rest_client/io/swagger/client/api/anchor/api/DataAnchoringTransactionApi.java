/*
 * Anchor API
 * # Introduction 이 문서는 KAS\\(Klaytn API Service\\)의 Anchor API를 소개하는 문서입니다. Anchor API는 서비스 체인 데이터의 신뢰성을 보장하기 위해 데이터 신뢰성을 증명할 수 있는 메타데이터를 Klaytn 메인 체인에 전송하는 기능을 제공합니다.  자세한 사용 예시는 [튜토리얼](링크)를 확인하십시오.    # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1071010 | data don't exist 1071615 | its value is out of range; size 1072100 | same payload ID or payload was already anchored 1072101 | all configured accounts have insufficient funds |  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.api;


import com.google.gson.reflect.TypeToken;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.*;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.model.AnchorBlockRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.model.AnchorBlockStatus;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.model.AnchorTransactionDetail;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.model.AnchorTransactions;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataAnchoringTransactionApi {
    private ApiClient apiClient;

    public DataAnchoringTransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataAnchoringTransactionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for anchorBlock
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call anchorBlockCall(String xChainId, AnchorBlockRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/anchor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call anchorBlockValidateBeforeCall(String xChainId, AnchorBlockRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling anchorBlock(Async)");
        }
        
        com.squareup.okhttp.Call call = anchorBlockCall(xChainId, body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * 앵커링 트랜잭션 생성
     * 블록체인 데이터를 앵커링 하기 위해 사용됩니다. 이미 설정한 오퍼레이터를 통해 앵커 트랜잭션 발생 및 관리합니다. 오퍼레이터 또는 사용자 Feepayer 를 통한 앵커링을 성공하기 위해서는 실제 요구되는 수수료의 10배이상 잔액을 보유하여야 합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return AnchorBlockStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchorBlockStatus anchorBlock(String xChainId, AnchorBlockRequest body) throws ApiException {
        ApiResponse<AnchorBlockStatus> resp = anchorBlockWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * 앵커링 트랜잭션 생성
     * 블록체인 데이터를 앵커링 하기 위해 사용됩니다. 이미 설정한 오퍼레이터를 통해 앵커 트랜잭션 발생 및 관리합니다. 오퍼레이터 또는 사용자 Feepayer 를 통한 앵커링을 성공하기 위해서는 실제 요구되는 수수료의 10배이상 잔액을 보유하여야 합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AnchorBlockStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchorBlockStatus> anchorBlockWithHttpInfo(String xChainId, AnchorBlockRequest body) throws ApiException {
        com.squareup.okhttp.Call call = anchorBlockValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<AnchorBlockStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 앵커링 트랜잭션 생성 (asynchronously)
     * 블록체인 데이터를 앵커링 하기 위해 사용됩니다. 이미 설정한 오퍼레이터를 통해 앵커 트랜잭션 발생 및 관리합니다. 오퍼레이터 또는 사용자 Feepayer 를 통한 앵커링을 성공하기 위해서는 실제 요구되는 수수료의 10배이상 잔액을 보유하여야 합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call anchorBlockAsync(String xChainId, AnchorBlockRequest body, final ApiCallback<AnchorBlockStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = anchorBlockValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchorBlockStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnchorBlockByPayloadID
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param payloadId 페이로드 ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnchorBlockByPayloadIDCall(String xChainId, String operatorId, String payloadId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/operator/{operator-id}/payload/{payload-id}"
            .replaceAll("\\{" + "operator-id" + "\\}", apiClient.escapeString(operatorId.toString()))
            .replaceAll("\\{" + "payload-id" + "\\}", apiClient.escapeString(payloadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnchorBlockByPayloadIDValidateBeforeCall(String xChainId, String operatorId, String payloadId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getAnchorBlockByPayloadID(Async)");
        }
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling getAnchorBlockByPayloadID(Async)");
        }
        // verify the required parameter 'payloadId' is set
        if (payloadId == null) {
            throw new ApiException("Missing the required parameter 'payloadId' when calling getAnchorBlockByPayloadID(Async)");
        }
        
        com.squareup.okhttp.Call call = getAnchorBlockByPayloadIDCall(xChainId, operatorId, payloadId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 페이로드로 앵커링 트랜잭션 조회
     * Paylaod ID와 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param payloadId 페이로드 ID (required)
     * @return AnchorTransactionDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchorTransactionDetail getAnchorBlockByPayloadID(String xChainId, String operatorId, String payloadId) throws ApiException {
        ApiResponse<AnchorTransactionDetail> resp = getAnchorBlockByPayloadIDWithHttpInfo(xChainId, operatorId, payloadId);
        return resp.getData();
    }

    /**
     * 페이로드로 앵커링 트랜잭션 조회
     * Paylaod ID와 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param payloadId 페이로드 ID (required)
     * @return ApiResponse&lt;AnchorTransactionDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchorTransactionDetail> getAnchorBlockByPayloadIDWithHttpInfo(String xChainId, String operatorId, String payloadId) throws ApiException {
        com.squareup.okhttp.Call call = getAnchorBlockByPayloadIDValidateBeforeCall(xChainId, operatorId, payloadId, null, null);
        Type localVarReturnType = new TypeToken<AnchorTransactionDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 페이로드로 앵커링 트랜잭션 조회 (asynchronously)
     * Paylaod ID와 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param payloadId 페이로드 ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnchorBlockByPayloadIDAsync(String xChainId, String operatorId, String payloadId, final ApiCallback<AnchorTransactionDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnchorBlockByPayloadIDValidateBeforeCall(xChainId, operatorId, payloadId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchorTransactionDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnchorBlockByTx
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param transactionHash 트랜잭션 해시 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnchorBlockByTxCall(String xChainId, String operatorId, String transactionHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/operator/{operator-id}/tx/{transaction-hash}"
            .replaceAll("\\{" + "operator-id" + "\\}", apiClient.escapeString(operatorId.toString()))
            .replaceAll("\\{" + "transaction-hash" + "\\}", apiClient.escapeString(transactionHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnchorBlockByTxValidateBeforeCall(String xChainId, String operatorId, String transactionHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getAnchorBlockByTx(Async)");
        }
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling getAnchorBlockByTx(Async)");
        }
        // verify the required parameter 'transactionHash' is set
        if (transactionHash == null) {
            throw new ApiException("Missing the required parameter 'transactionHash' when calling getAnchorBlockByTx(Async)");
        }
        
        com.squareup.okhttp.Call call = getAnchorBlockByTxCall(xChainId, operatorId, transactionHash, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 트랜잭션 해시로 앵커링 트랜잭션 조회
     * 트랜잭션 해시값과 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param transactionHash 트랜잭션 해시 (required)
     * @return AnchorTransactionDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchorTransactionDetail getAnchorBlockByTx(String xChainId, String operatorId, String transactionHash) throws ApiException {
        ApiResponse<AnchorTransactionDetail> resp = getAnchorBlockByTxWithHttpInfo(xChainId, operatorId, transactionHash);
        return resp.getData();
    }

    /**
     * 트랜잭션 해시로 앵커링 트랜잭션 조회
     * 트랜잭션 해시값과 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param transactionHash 트랜잭션 해시 (required)
     * @return ApiResponse&lt;AnchorTransactionDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchorTransactionDetail> getAnchorBlockByTxWithHttpInfo(String xChainId, String operatorId, String transactionHash) throws ApiException {
        com.squareup.okhttp.Call call = getAnchorBlockByTxValidateBeforeCall(xChainId, operatorId, transactionHash, null, null);
        Type localVarReturnType = new TypeToken<AnchorTransactionDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 트랜잭션 해시로 앵커링 트랜잭션 조회 (asynchronously)
     * 트랜잭션 해시값과 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param transactionHash 트랜잭션 해시 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnchorBlockByTxAsync(String xChainId, String operatorId, String transactionHash, final ApiCallback<AnchorTransactionDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnchorBlockByTxValidateBeforeCall(xChainId, operatorId, transactionHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchorTransactionDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveAnchorBlock
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param size 검색할 계정의 최대 사이즈 (optional, default to 100)
     * @param cursor 마지막으로 검색된 커서의 정보 (optional)
     * @param fromTimestamp 검색하고자 하는 처음 시간의 타임스탬프 (초단위) (optional)
     * @param toTimestamp 검색하고자 하는 마지막 시간의 타임스탬프 (초단위) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveAnchorBlockCall(String xChainId, String operatorId, Long size, String cursor, Long fromTimestamp, Long toTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/operator/{operator-id}/tx"
            .replaceAll("\\{" + "operator-id" + "\\}", apiClient.escapeString(operatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (fromTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from-timestamp", fromTimestamp));
        if (toTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to-timestamp", toTimestamp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveAnchorBlockValidateBeforeCall(String xChainId, String operatorId, Long size, String cursor, Long fromTimestamp, Long toTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling retrieveAnchorBlock(Async)");
        }
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling retrieveAnchorBlock(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveAnchorBlockCall(xChainId, operatorId, size, cursor, fromTimestamp, toTimestamp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 오퍼레이터로 앵커링 트랜잭션 목록 조회
     * 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션 목록을 조회합니다.  ## Size  * &#x60;size&#x60; 쿼리 파라미터는 선택 파라미터입니다 (최소값 &#x3D; 1, 최대값 &#x3D; 1000, 기본값 &#x3D; 100) * 음수를 입력하면 오류를 반환합니다 * 0을 입력하면 기본값(&#x60;size&#x3D;100&#x60;)을 사용합니다 * 최대값보다 큰 값을 입력하면 최대값을 사용합니다
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param size 검색할 계정의 최대 사이즈 (optional, default to 100)
     * @param cursor 마지막으로 검색된 커서의 정보 (optional)
     * @param fromTimestamp 검색하고자 하는 처음 시간의 타임스탬프 (초단위) (optional)
     * @param toTimestamp 검색하고자 하는 마지막 시간의 타임스탬프 (초단위) (optional)
     * @return AnchorTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchorTransactions retrieveAnchorBlock(String xChainId, String operatorId, Long size, String cursor, Long fromTimestamp, Long toTimestamp) throws ApiException {
        ApiResponse<AnchorTransactions> resp = retrieveAnchorBlockWithHttpInfo(xChainId, operatorId, size, cursor, fromTimestamp, toTimestamp);
        return resp.getData();
    }

    /**
     * 오퍼레이터로 앵커링 트랜잭션 목록 조회
     * 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션 목록을 조회합니다.  ## Size  * &#x60;size&#x60; 쿼리 파라미터는 선택 파라미터입니다 (최소값 &#x3D; 1, 최대값 &#x3D; 1000, 기본값 &#x3D; 100) * 음수를 입력하면 오류를 반환합니다 * 0을 입력하면 기본값(&#x60;size&#x3D;100&#x60;)을 사용합니다 * 최대값보다 큰 값을 입력하면 최대값을 사용합니다
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param size 검색할 계정의 최대 사이즈 (optional, default to 100)
     * @param cursor 마지막으로 검색된 커서의 정보 (optional)
     * @param fromTimestamp 검색하고자 하는 처음 시간의 타임스탬프 (초단위) (optional)
     * @param toTimestamp 검색하고자 하는 마지막 시간의 타임스탬프 (초단위) (optional)
     * @return ApiResponse&lt;AnchorTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchorTransactions> retrieveAnchorBlockWithHttpInfo(String xChainId, String operatorId, Long size, String cursor, Long fromTimestamp, Long toTimestamp) throws ApiException {
        com.squareup.okhttp.Call call = retrieveAnchorBlockValidateBeforeCall(xChainId, operatorId, size, cursor, fromTimestamp, toTimestamp, null, null);
        Type localVarReturnType = new TypeToken<AnchorTransactions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 오퍼레이터로 앵커링 트랜잭션 목록 조회 (asynchronously)
     * 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션 목록을 조회합니다.  ## Size  * &#x60;size&#x60; 쿼리 파라미터는 선택 파라미터입니다 (최소값 &#x3D; 1, 최대값 &#x3D; 1000, 기본값 &#x3D; 100) * 음수를 입력하면 오류를 반환합니다 * 0을 입력하면 기본값(&#x60;size&#x3D;100&#x60;)을 사용합니다 * 최대값보다 큰 값을 입력하면 최대값을 사용합니다
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param operatorId 오퍼레이터 계정 주소 (required)
     * @param size 검색할 계정의 최대 사이즈 (optional, default to 100)
     * @param cursor 마지막으로 검색된 커서의 정보 (optional)
     * @param fromTimestamp 검색하고자 하는 처음 시간의 타임스탬프 (초단위) (optional)
     * @param toTimestamp 검색하고자 하는 마지막 시간의 타임스탬프 (초단위) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveAnchorBlockAsync(String xChainId, String operatorId, Long size, String cursor, Long fromTimestamp, Long toTimestamp, final ApiCallback<AnchorTransactions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveAnchorBlockValidateBeforeCall(xChainId, operatorId, size, cursor, fromTimestamp, toTimestamp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchorTransactions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
